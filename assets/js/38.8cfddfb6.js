(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{431:function(t,r,a){"use strict";a.r(r);var e=a(42),s=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"設計模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#設計模式"}},[t._v("#")]),t._v(" 設計模式")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#什麼是設計模式-patterns"}},[t._v("什麼是設計模式（patterns）")])]),a("li",[a("a",{attrs:{href:"#patterns-帶來的喜樂-patterns-happy"}},[t._v("Patterns 帶來的喜樂（Patterns Happy）")])]),a("li",[a("a",{attrs:{href:"#條條道路通-patterns"}},[t._v("條條道路通 Patterns")])]),a("li",[a("a",{attrs:{href:"#重構成為-to-、接近-toward-、遠離-away-from-設計模式"}},[t._v("重構成為（to）、接近（toward）、遠離（away from） 設計模式")])]),a("li",[a("a",{attrs:{href:"#patterns-會讓程式碼變得更複雜嗎"}},[t._v("Patterns 會讓程式碼變得更複雜嗎？")])]),a("li",[a("a",{attrs:{href:"#模式知識-pattern-knowledge"}},[t._v("模式知識（Pattern Knowledge）")])]),a("li",[a("a",{attrs:{href:"#以模式進行預設計-up-front-design"}},[t._v("以模式進行預設計（Up-Front Design）")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"什麼是設計模式-patterns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什麼是設計模式-patterns"}},[t._v("#")]),t._v(" 什麼是設計模式（patterns）")]),t._v(" "),a("p",[t._v("Alexander:")]),t._v(" "),a("blockquote",[a("p",[t._v("每個 pattern 都是個「三部份組成的規則」（three-part rule）：描述情境（context）、問題（problem）和解決方案（solution）之間的關係。")]),t._v(" "),a("p",[t._v("就像世界上的元素一樣，每個 pattern 都是一種「由三樣事物構成」的關係，這三樣事物分別是：某種情境（context）、該情境下重複發生的作用力系統（system of force），以及讓作用力互相消除的空間結構（spatial configuration）。")]),t._v(" "),a("p",[t._v("就像語言的元素一樣，在適當的環境下 pattern 是一種指引，說明空間結構如何可以再三地消除已知的作用力系統。")]),t._v(" "),a("p",[t._v("總之，pattern 是世界上曾經發生過的事物，也是告訴我們如何產生這樣事物的規則，並且告訴我們必須在何時產生它。他是過程（process）也是事物（thing）；同時也是現有事物的描述以及產生該事物的過程描述。")])]),t._v(" "),a("h2",{attrs:{id:"patterns-帶來的喜樂-patterns-happy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#patterns-帶來的喜樂-patterns-happy"}},[t._v("#")]),t._v(" Patterns 帶來的喜樂（Patterns Happy）")]),t._v(" "),a("p",[t._v("可參考"),a("a",{attrs:{href:"https://taskinoor.wordpress.com/2011/09/21/the-abuse-of-design-patterns-in-writing-a-hello-world-program/",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何使用設計模式來寫 Hello World"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"條條道路通-patterns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#條條道路通-patterns"}},[t._v("#")]),t._v(" 條條道路通 Patterns")]),t._v(" "),a("p",[t._v("（略）")]),t._v(" "),a("h2",{attrs:{id:"重構成為-to-、接近-toward-、遠離-away-from-設計模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重構成為-to-、接近-toward-、遠離-away-from-設計模式"}},[t._v("#")]),t._v(" 重構成為（to）、接近（toward）、遠離（away from） 設計模式")]),t._v(" "),a("p",[t._v("作者整理一個表格，整理了本書描述的關於設計模式的重構「成為」、「接近」、「遠離」的方法：\n"),a("a",{attrs:{href:"https://flylib.com/books/en/1.476.1.41/1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://flylib.com/books/en/1.476.1.41/1/"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"patterns-會讓程式碼變得更複雜嗎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#patterns-會讓程式碼變得更複雜嗎"}},[t._v("#")]),t._v(" Patterns 會讓程式碼變得更複雜嗎？")]),t._v(" "),a("p",[t._v("（說故事）簡單來說，菜雞也會欣賞好的設計。通常設計模式的實作應該有助於移除重複碼、簡化邏輯、傳達程式碼的目的以及增進彈性。")]),t._v(" "),a("p",[t._v("不過，人們對設計模式的熟悉度在他們"),a("strong",[t._v("理解 patterns-based refactorings")]),t._v(" 這件事情上扮演了一個重要角色。寧可讓團隊學習設計模式，不要讓團隊因為設計模式太複雜而逃避。如果因為某個設計模式實作可能導致程式碼變得複雜，請馬上回頭，或進行更多重構。")]),t._v(" "),a("h2",{attrs:{id:"模式知識-pattern-knowledge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式知識-pattern-knowledge"}},[t._v("#")]),t._v(" 模式知識（Pattern Knowledge）")]),t._v(" "),a("p",[t._v("如果你不了解設計模式，你不太可能發展出偉大的設計。")]),t._v(" "),a("p",[t._v("（吹捧 JUnit 和 Kent Beck）")]),t._v(" "),a("p",[t._v("如何取得設計模式的知識？作者偏好選擇優質的設計模式書籍來學習，然後開讀書會一個星期學習一個設計模式。"),a("a",{attrs:{href:"https://www.industriallogic.com/blog/pools-of-insight-study-groups/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pool of Insight"),a("OutboundLink")],1),t._v(" 描述如何成立一個能夠長期運作的 patterns 讀書會。")]),t._v(" "),a("h2",{attrs:{id:"以模式進行預設計-up-front-design"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#以模式進行預設計-up-front-design"}},[t._v("#")]),t._v(" 以模式進行預設計（Up-Front Design）")]),t._v(" "),a("p",[t._v("（說故事）")]),t._v(" "),a("p",[t._v("結論：通常不贊同以設計模式進行預設計，不過 "),a("em",[t._v("Command")]),t._v(" 是主要例外，因為它容易實作，而且系統的行為明確需要 "),a("em",[t._v("Command")]),t._v(" 的支援。")])])}),[],!1,null,null,null);r.default=s.exports}}]);